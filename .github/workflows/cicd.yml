# This is a basic workflow to help you get started with Actions

name: GithubActions-02

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Trigger TestGithubActions Pipeline
        run: |
          echo Triggering pipeline for testGitHubActions repo,
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.PAT }}" \
            https://api.github.com/repos/khizarsheikh/testGitHubActions/actions/workflows/main.yml/dispatches \
            -d '{"ref":"main"}'

      - name: Get and Wait for testGitHubActions Workflow Run
        id: wait-for-run
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          # --- Config ---
          REPO="khizarsheikh/testGitHubActions"
          BRANCH="main"
          EVENT="workflow_dispatch"
          MAX_ATTEMPTS=10
          DELAY_BEFORE_FETCH=10
          POLL_INTERVAL=15
          AUTH_HEADER="Authorization: Bearer ${{ secrets.PAT }}"
      
          echo "⏳ Waiting $DELAY_BEFORE_FETCH seconds before checking for workflow run..."
          sleep $DELAY_BEFORE_FETCH
      
          # --- Get Workflow Run ID ---
          attempt=0
          run_id=""
      
          while [[ -z "$run_id" && $attempt -lt $MAX_ATTEMPTS ]]; do
            echo "🔍 Attempt $((attempt+1)) to find workflow run..."
            response=$(curl -s -H "$AUTH_HEADER" \
              "https://api.github.com/repos/$REPO/actions/runs?branch=$BRANCH&event=$EVENT")
      
            run_id=$(echo "$response" | jq -r '.workflow_runs[] | select(.status=="in_progress" or .status=="queued") | .id' | head -n 1)
      
            if [[ -z "$run_id" ]]; then
              echo "⌛ Workflow run not found yet. Retrying in 5 seconds..."
              sleep 5
              ((attempt++))
            fi
          done
      
          if [[ -z "$run_id" ]]; then
            echo "❌ Failed to fetch workflow run ID after $MAX_ATTEMPTS attempts."
            exit 1
          fi
      
          echo "✅ Found workflow run ID: $run_id"
      
          # --- Wait for Workflow to Finish ---
          while :; do
            status_response=$(curl -s -H "$AUTH_HEADER" \
              "https://api.github.com/repos/$REPO/actions/runs/$run_id")
      
            status=$(echo "$status_response" | jq -r '.status')
            conclusion=$(echo "$status_response" | jq -r '.conclusion')
      
            echo "🔄 Workflow status: $status, conclusion: $conclusion"
      
            if [[ "$status" == "completed" ]]; then
              break
            fi
      
            sleep $POLL_INTERVAL
          done
      
          # --- Final Check ---
          if [[ "$conclusion" != "success" ]]; then
            echo "❌ Workflow completed with conclusion: $conclusion"
            # exit 1
          fi
      
          echo "🎉 testGitHubActions workflow completed successfully."
          echo "run_id=$run_id" >> $GITHUB_OUTPUT

          # echo "Listing ./artifacts directory..."
          # ls -alh ./artifacts
          
          gh run download --repo khizarsheikh/testGitHubActions --name report-url --dir ./artifacts

          echo "Listing ./artifacts directory..."
          ls -alh ./artifacts
          echo "Report URL:"
          if [[ -f ./artifacts/url.txt ]]; then
            echo "Printing ......."
            cat ./artifacts/url.txt
          else
            echo "Deleting ......"
            rm -f ./artifacts/url.txt
            echo "No report generated"
          fi

          echo "Cleaning ./artifacts"
          if [[  ]]
          rm -rf ./artifacts/*
          echo "Listing ./artifacts directory..."
          pwd
          ls -alh ./artifacts

            
          # cat ./artifacts/report.txt

      ########################## 1 ##########################
      # - name: Download and Print report URL
      #   run: |
      #     gh run download --repo khizarsheikh/testGitHubActions --name report-url --dir ./artifacts
      #     echo "Report URL:"
      #     cat ./artifacts/url.txt
      #     cat ./artifacts/report.txt
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.PAT }}

      ########################## 2 ##########################
      # - name: Download URL artifact from testGitHubActions
      #   uses: dawidd6/action-download-artifact@v2
      #   with:
      #     github_token: ${{ secrets.PAT }}
      #     repo: khizarsheikh/testGitHubActions
      #     workflow: main.yml
      #     name: report-url
      #     path: ./artifacts

      # - name: Print report URL
      #   run: | 
      #       echo "Report URL:" 
      #       cat ./artifacts/url.txt 
      #       cat ./artifacts/report.txt

  # fetch-report:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - name: Download and Print report URL
  #       run: |
  #         gh run download --repo khizarsheikh/testGitHubActions --name report-url --dir ./artifacts
  #         echo "Report URL:"
  #         cat ./artifacts/url.txt
  #         cat ./artifacts/report.txt
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.PAT }}
